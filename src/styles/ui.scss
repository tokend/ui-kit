@import "vars";
@import "funcs";
@import "media";

@mixin ui-base($display: block) {
  display: $display;
  box-sizing: border-box;
  font-size: inherit;
  line-height: inherit;
  padding: 0;
  outline: none;
  font-family: inherit;

  // todo: make mixin from it
  transition: all ease-out 300ms;
}

@mixin ui-can-fill(
  $backgroundPrimary: color,
  $backgroundSecondary: color,
  $boxShadow: none
) {
  &[fill="solid"] {
    &[look="primary"] {
      color: var(--ui-col-primary-contrast);
      background: $backgroundPrimary;
    }

    &[look="secondary"] {
      color: var(--ui-col-secondary-contrast);
      background: $backgroundSecondary;
    }

    &[look="error"] {
      color: var(--ui-col-secondary-contrast);
      background: var(--ui-col-error);
    }
  }

  &[fill="none"] {
    background: transparent;
    border-width: 0;
    box-shadow: $boxShadow;

    &[look="primary"] {
      color: $backgroundPrimary;
    }

    &[look="secondary"] {
      color: $backgroundSecondary;
    }

    &[look="error"] {
      color: var(--ui-col-error);
    }
  }
}

@mixin ui-can-disabled(
  $backgroundPrimary: color,
  $backgroundSecondary: color,
  $opacityPrimary: none,
  $opacitySecondary: none,
  $color: color
) {
  &[is-disabled],
  &[is-disabled]:hover,
  &[is-disabled-phone],
  &[is-disabled-phone]:hover {
    cursor: not-allowed;

    // TODO: let's simplify this whole thing: change the opacity to 0.75 for disabled field and that's enough. No
    //  complex variables, etc, just opacity

    &[fill="none"] {
      color: $color !important;
      background: $backgroundSecondary !important; // TODO: fill=none means there is no background
      opacity: $opacitySecondary;
    }

    &[fill="solid"] {
      color: $color !important;
      background: $backgroundPrimary !important;
      box-shadow: none !important;
      border-color: none !important;
      border-style: none !important;
      opacity: $opacityPrimary;
    }
  }
}

@mixin ui-can-click($transition: none, $transform: none) {
  transition: all linear 300ms;

  &:not([is-disabled]) {
    &:hover,
    &:focus {
      transition: $transition;
    }

    &:active {
      transform: $transform;
    }
  }
}

@mixin ui-wrap-soft($display: block) {
  //@include respond-font-size(var(--ui-font-size));

  font-family: var(--ui-font-family);
  display: $display;
}

@mixin ui-wrap($display: block) {
  @include ui-wrap-soft($display);

  box-sizing: border-box;
  position: relative;
  line-height: var(--ui-line-height);
}

@mixin ui-can-text() {
  // @include respond-font-size($layout-ui-font-size);

  font-family: inherit;
  color: var(--ui-col-text);

  &::placeholder {
    font-family: inherit;
    color: transparent;
  }
}

@mixin ui-can-error($color: color, $borderColor: none) {
  &[is-error],
  &[is-error]:hover {
    border-color: $borderColor !important;
    color: $color;
  }
}

@mixin reset-number-appearance {
  &[type="number"] {
    -moz-appearance: textfield;
    appearance: textfield;
    margin: 0;

    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    &::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }
}

@mixin scrollbar-awesome($transparent: false) {
  &::-webkit-scrollbar-track {
    background-color: transparent;
  }

  &::-webkit-scrollbar {
    @if ($transparent) {
      background-color: transparent;
    }

    background-color: var(--ui-col-light);
    width: 2px;
    height: 2px;
  }

  &::-webkit-scrollbar-thumb {
    background-color: var(--ui-col-dark);
  }
}
